{\rtf1\ansi{\fonttbl\f0\fswiss Helvetica;}
\pard\plain\qc\f0\fs24 this is the GNU implementation of {\fs32\b NSText}\par
\pard\plain\qc\f0\fs24 based on work one by {\b Daniel B*hringer}.\par
\pard\plain\f0\fs24 \par
\pard\plain\qc\f0\fs24 What it already does is laying out plain text. You can modify selectin and text as with NeXT's NSText class and even use the NeXT spell checking mechanism. there are problems remaining however (pasting newline characters at the end of a paragraph and performance on very large text)... but these problems will eventually fixed :-)\par
\pard\plain\qc\f0\fs24 \par
\pard\plain\qc\f0\fs24 Some annotations: \par
\pard\plain\f0\fs24 \par
\pard\plain\f0\fs24 it is implemented completely at foundation level and thus should be unicode ready. (a subclass might override the central rebuildPlainLineLayoutInformationStartingAtLine: lineformatting method using a plain c-string approach if the performance turns out to be limiting to usefulnes).\par
\pard\plain\f0\fs24 \par
\pard\plain\f0\fs24 at implementation level rtf is not treated different from rtfd since both are handled by NSAttributed string.\par
\pard\plain\f0\fs24 \par
\pard\plain\f0\fs24 currently refreshes the lines below the edited line up to the next paragraph (this may cause performance problems with large paragraphs). a simple workaorund is beeing worked out but not implemented yet (coming soon).\par
\pard\plain\f0\fs24 \par
\pard\plain\f0\fs24 in plain mode words wraps use the selectionGranularity configuration for word/ paragraph boundry detection.\par
\pard\plain\f0\fs24 \par
\pard\plain\f0\fs24 tabs are not treated differently from other characters but nevertheles work as expected thanks to NeXT's implementation of -sizeWithAttributes: and -drawAtPoint:withAttributes: (in plain mode tab information seems to come from [NSParagraphStyle defaultParagraphStyle]).\par
\pard\plain\f0\fs24 \par
}